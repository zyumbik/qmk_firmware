//   name     result    chord keys

// action keys
COMB(sdBspc,      KC_BSPC,               KC_S, KC_D) // backspace
COMB(sdfAltBspc,  LALT(KC_BSPC),         KC_S, KC_D, KC_F) // delete word
COMB(asdCmdBspc,  LCMD(KC_BSPC),         LCMD_T(KC_A), KC_S, KC_D) // delete line
COMB(gbTab,       KC_TAB,                KC_G, KC_B) // tab
COMB(gtEsc,       KC_ESC,                KC_G, KC_T) // esc
COMB(hnEnter,     KC_ENT,                KC_H, KC_N) // enter
COMB(hySftEnter,  LSFT(KC_ENT),          KC_H, KC_Y) // shift enter
COMB(klDel,       KC_DEL,                KC_K, KC_L) // forward delete
COMB(kjSpace,     KC_SPC,                KC_K, KC_J) // space
// COMB(arrUp,       KC_UP,                 KC_E, KC_R) // ↑ arrow up // don't set er combo as it's a common roll
// COMB(arrDn,       KC_DOWN,               KC_D, KC_F) // ↓ arrow down
COMB(arrRght,     KC_RIGHT,              KC_R, KC_F) // → arrow right
COMB(arrLft,      KC_LEFT,               KC_E, KC_D) // ← arrow left
COMB(kiAltRight,  RALT(KC_RIGHT),        KC_K, KC_I) // alt right (move, select, tabs, etc.)
COMB(ujAltLeft,   RALT(KC_LEFT),         KC_U, KC_J) // alt left
COMB(werPlay,     KC_MPLY,               KC_W, KC_E, KC_R) // media play

// symbols
COMB(hjDash,      KC_MINS,               KC_H, KC_J)
COMB(yuEquals,    KC_EQL,                KC_Y, KC_U)
COMB(nmQuot,      KC_QUOT,               KC_N, KC_M)
COMB(cdDot,       RALT(RCTL(KC_DOT)),    KC_COMM, RCTL_T(KC_DOT))
COMB(dmComm,      RALT(RCTL(KC_COMM)),   KC_COMM, KC_M)

COMB(symArrL,     RALT(RSFT(KC_RBRC)),   KC_LCBR, KC_LPRN) // → symbol
COMB(symArrR,     RALT(KC_RBRC),         KC_RCBR, KC_RPRN) // ← symbol
COMB(symArrU,     RALT(KC_QUOT),         KC_LCBR, KC_RCBR) // ↑ symbol
COMB(symArrD,     RALT(RSFT(KC_QUOT)),   KC_LPRN, KC_RPRN) // ↓ symbol

// Russian letters
COMB(opBacksl,    KC_BSLS,               KC_O, RCMD_T(KC_P)) // ё
COMB(uiLbrc,      KC_LBRC,               KC_U, KC_I) // х
COMB(ioRbrc,      KC_RBRC,               KC_I, KC_O) // ъ

// commands
COMB(bvUndo,      RGUI(KC_Z),            KC_B, KC_V) // undo
COMB(ertF19,      KC_F19,                KC_R, KC_T, KC_E) // fullscreen
// COMB(yiF2,        KC_F2,                 KC_Y, KC_I) // screenshot
COMB(uioF2,       KC_F2,                 KC_U, KC_I, KC_O) // screenshot part of screen
COMB(mcdF1,       KC_F1,                 KC_M, KC_COMM, RCTL_T(KC_DOT)) // screenshot full
COMB(oipCtrlF2,   RCTL(KC_F2),           KC_O, KC_I, RCMD_T(KC_P)) // screenshot to file
COMB(cdsCtrlF1,   RCTL(KC_F1),           KC_COMM, RCTL_T(KC_DOT), RSFT_T(KC_SLSH)) // full screenshot to file
COMB(kjlCmdSpc,   RGUI(KC_SPC),          KC_J, KC_K, KC_L) // language switch

COMB(e1Esc,       KC_ESC,                KC_E, KC_1) // esc
COMB(f1Enter,     KC_ENT,                KC_1, KC_F) // enter
COMB(zeroOneBase, TO(0),              KC_0, KC_1) // switch to BASE layer
COMB(tBGame,      TO(3),              KC_T, KC_B) // switch to GAME layer